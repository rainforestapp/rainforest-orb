description: Start a new Rainforest run

parameters:
  description:
    description: An arbitrary string to associate with the run
    type: string
    default: "$CIRCLE_PROJECT_REPONAME - $CIRCLE_BRANCH $CIRCLE_BUILD_NUM $(date -u +'%FT%TZ')"

  run_group_id:
    description: Only run tests tied to this Run Group
    type: string

  environment_id:
    description: Use a specific environment for this run
    type: string
    default: ""

  conflict:
    description: How other currently in-progress runs should be handled. Values are `abort` to abort runs in the same environment as your new run and `abort-all` to abort all runs
    type: string
    default: ""

  crowd:
    description: The crowd to use for this run
    type: string
    default: ""

  release:
    description: Manually entered release information about the release the run is associated with
    type: string
    default: "$CIRCLE_SHA1"

  token:
    description: The name of the environment variable containing your Rainforest QA API token
    type: env_var_name
    default: RAINFOREST_TOKEN

  dry_run:
    description: Set to true to run parameter validations without starting a new Rainforest run
    type: boolean
    default: false

  background:
    description: Do not wait for a run to complete before exiting
    type: boolean
    default: false

  pipeline_id:
    description: The CircleCI Pipeline ID ( << pipeline.id >> ), used to rerun only failed tests when a CircleCI workflow is rerun
    type: string

steps:
  - run:
      name: Run Rainforest
      environment:
        ORB_VERSION: 3.0.3
      command: |
        # Show Orb Version
        echo "Using Rainforest Orb v${ORB_VERSION}"

        # Ensure results directory is there
        mkdir -p ~/results/rainforest

        # Validate token
        if [ -z "${<< parameters.token >>}" ] ; then
          echo "Error: Token not set"
          exit 1
        fi

        # Validate conflict
        if [ -n "<< parameters.conflict >>" ] ; then
          if ! echo "abort abort-all" | grep -Eq "\b"<< parameters.conflict >>"\b" ; then
            echo "Error: << parameters.conflict >> not in (abort abort-all)"
            exit 1
          fi
        fi

        # Check for rerun
        if [ -n "<< parameters.pipeline_id >>" ] && [ -s ~/pipeline/<< parameters.pipeline_id >> ] ; then
          export RAINFOREST_RUN_ID=$(cat ~/pipeline/<< parameters.pipeline_id >>)
          echo "Rerunning Run ${RAINFOREST_RUN_ID}"

          if ! << parameters.dry_run >> ; then
            # Create the rerun
            rainforest rerun \
              --skip-update \
              --token "${<< parameters.token >>}" \
              <<# parameters.conflict >> --conflict "<< parameters.conflict >>" <</ parameters.conflict >> \
              --background="<< parameters.background >>" \
              --junit-file ~/results/rainforest/results.xml
          fi

          exit 0
        fi

        # Validate run_group_id
        if ! echo "<< parameters.run_group_id >>" | grep -Eq '^[0-9]+$' ; then
          echo "Error: run_group_id not a positive integer (<< parameters.run_group_id >>)"
          exit 1
        fi

        # Validate environment_id
        if [ -n "<< parameters.environment_id >>" ] ; then
          if ! echo "<< parameters.environment_id >>" | grep -Eq '^[0-9]+$' ; then
            echo "Error: environment_id not a positive integer (<< parameters.environment_id >>)"
            exit 1
          fi
        fi

        # Validate crowd
        if [ -n "<< parameters.crowd >>" ] ; then
          if ! echo "default automation automation_and_crowd on_premise_crowd" | grep -Eq "\b"<< parameters.crowd >>"\b" ; then
            echo "Error: << parameters.crowd >> not in (default automation automation_and_crowd on_premise_crowd)"
            exit 1
          fi
        fi

        if ! << parameters.dry_run >> ; then
          # Create the run
          rainforest run \
            --skip-update \
            --token "${<< parameters.token >>}" \
            --description "<< parameters.description >>" \
            --run-group "<< parameters.run_group_id >>" \
            <<# parameters.environment_id >> --environment-id "<< parameters.environment_id >>" <</ parameters.environment_id >> \
            <<# parameters.conflict >> --conflict "<< parameters.conflict >>" <</ parameters.conflict >> \
            <<# parameters.crowd >> --crowd "<< parameters.crowd >>" <</ parameters.crowd >> \
            --release "<< parameters.release >>" \
            --background="<< parameters.background >>" \
            --junit-file ~/results/rainforest/results.xml
        fi
  - unless:
      condition: << parameters.dry_run >>
      steps:
        - store_test_results:
            path: ~/results
        - store_artifacts:
            path: ~/results
