version: 2.1
description: |
  Rainforest QA's CircleCI Orb
  Prerequisites:
    - a Rainforest QA account (https://app.rainforestqa.com/trial)
    - a Rainforest QA API token (https://app.rainforestqa.com/settings/integrations)
    - a RunGroup with some tests (https://app.rainforestqa.com/tests)
  Orb repo (fleshed out README and full source code): https://github.com/rainforestapp/rainforest-orb

executors:
  default:
    description: Latest Rainforest CLI Docker image
    docker:
      - image: gcr.io/rf-public-images/rainforest-cli:<< parameters.tag >>
    parameters:
      tag:
        description: |
          A tag pointing to an older version of the Rainforest CLI Docker image.
          A list of tags can be found at https://gcr.io/rf-public-images/rainforest-cli.
        type: string
        default: latest

commands:
  validate_numeric:
    description: Validate parameter is a number
    parameters:
      key:
        description: The name of the parameter to validate
        type: string
      value:
        description: The value of the parameter to validate
        type: string
    steps:
      - run:
          name: Verify << parameters.key >> is a number
          command: |
            if ! echo "<< parameters.value >>" | grep -Eq '^[0-9]+$' ; then
              echo "Error: << parameters.value >> not a number"
              exit 1
            fi
  validate_enum:
    description: Validate parameter is an allowed value
    parameters:
      key:
        description: The name of the parameter to validate
        type: string
      value:
        description: The value of the parameter to validate
        type: string
      enum:
        description: The space-delimited list of accepted values
        type: string
    steps:
      - run:
          name: Verify << parameters.key >> is an allowed value
          command: |
            if ! echo "<< parameters.enum >>" | grep -Eq "(^|[[:space:]])"<< parameters.value >>"($|[[:space:]])" ; then
              echo "Error: << parameters.value >> not in << parameters.enum >>"
              exit 1
            fi

jobs:
  run:
    description: Start a new Rainforest run

    parameters:
      description:
        description: An arbitrary string to associate with the run
        type: string
        default: "$CIRCLE_PROJECT_REPONAME - $CIRCLE_BRANCH $CIRCLE_BUILD_NUM $(date -u +'%FT%TZ')"

      run_group_id:
        description: Only run tests tied to this Run Group
        type: string

      environment_id:
        description: Use a specific environment for this run
        type: string
        default: ""

      conflict:
        description: How other currently in-progress runs should be handled. Values are `abort` to abort runs in the same environment as your new run and `abort-all` to abort all runs
        type: string
        default: ""

      crowd:
        description: The crowd to use for this run
        type: string
        default: ""

      release:
        description: Manually entered release information about the release the run is associated with
        type: string
        default: "$CIRCLE_SHA1"

      token:
        description: The name of the environment variable containing your Rainforest QA API token
        type: env_var_name
        default: RAINFOREST_TOKEN

      executor:
        description: The executor to run this command in
        type: executor
        default: default

    executor: <<parameters.executor>>

    steps:
      - run:
          name: Verify Rainforest API token is available
          command: |
            if ! [ ${<< parameters.token >>} ] ; then
              echo "Error: << parameters.token >> not set"
              exit 1
            fi
      - validate_numeric:
          key: run_group_id
          value: << parameters.run_group_id >>
      - when:
          condition: << parameters.environment_id >>
          steps:
            - validate_numeric:
                key: environment_id
                value: << parameters.environment_id >>
      - when:
          condition: << parameters.conflict >>
          steps:
            - validate_enum:
                key: conflict
                value: << parameters.conflict >>
                enum: abort abort-all
      - when:
          condition: << parameters.crowd >>
          steps:
            - validate_enum:
                key: crowd
                value: << parameters.crowd >>
                enum: default automation on_premise_crowd
      - run:
          name: Run Rainforest
          command: |
            rainforest-cli run \
              --token "${<< parameters.token >>}" \
              --description "<< parameters.description >>" \
              --run-group "<< parameters.run_group_id >>" \
              <<# parameters.environment_id >> --environment-id "<< parameters.environment_id >>" <</ parameters.environment_id >> \
              <<# parameters.conflict >> --conflict "<< parameters.conflict >>" <</ parameters.conflict >> \
              <<# parameters.crowd >> --crowd "<< parameters.crowd >>" <</ parameters.crowd >> \
              --release "<< parameters.release >>"

examples:
  simple:
    description: |
      Run tests from a specific run group
    usage:
      version: 2.1
      orbs:
        rainforest: rainforest-qa/rainforest@0.0.1
      workflows:
        build:
          jobs:
            - rainforest/run:
                run_group_id: 123
